package com.luxoft.blockchainlab.hyperledger.indy

import com.fasterxml.jackson.annotation.JsonIgnore
import com.fasterxml.jackson.annotation.JsonProperty
import org.hyperledger.indy.sdk.blob_storage.BlobStorageReader
import org.hyperledger.indy.sdk.blob_storage.BlobStorageWriter

/**
 * This file contains different data classes which are used to:
 *  1. Parse different indy responses from JSON
 *  2. Pass this data with some transport to other nodes
 */

/**
 * Represents a JSON object with data we don't care about
 */
typealias RawJsonMap = Map<String, Any?>

/**
 * Timestamps in indy-world are represented as seconds from current unix epoch and are passed as ints.
 */
object Timestamp {
    fun now() = (System.currentTimeMillis() / 1000)
}

/**
 * Represents time interval used for non-revocation proof request creation
 */
data class Interval(val from: Long?, val to: Long) {
    companion object {
        fun recent() = Interval(Timestamp.now() - 1, Timestamp.now())
        fun allTime() = Interval(null, Timestamp.now())
        fun now() = Interval(Timestamp.now(), Timestamp.now())
    }
}

/**
 * Represents pairwise connection
 */
data class ParsedPairwise(@JsonProperty("my_did") val myDid: String, val metadata: String)

interface ContainsSchemaId {
    val schemaId: String
}

fun ContainsSchemaId.getSchemaId() = SchemaId.fromString(schemaId)

interface ContainsCredentialDefinitionId {
    val credentialDefinitionId: String
}

fun ContainsCredentialDefinitionId.getCredentialDefinitionId() =
    CredentialDefinitionId.fromString(credentialDefinitionId)

interface ContainsRevocationRegistryId {
    val revocationRegistryId: String?
}

fun ContainsRevocationRegistryId.getRevocationRegistryId() =
    if (revocationRegistryId == null) null else RevocationRegistryDefinitionId.fromString(revocationRegistryId!!)


/**
 * Represents a particular attribute of a credential
 */
data class CredentialFieldReference(
    val fieldName: String,
    @JsonProperty("schema_id") override val schemaId: String,
    @JsonProperty("credential_definition_id") override val credentialDefinitionId: String
) : ContainsSchemaId, ContainsCredentialDefinitionId

/**
 * Represents predicate
 */
data class CredentialPredicate(val fieldReference: CredentialFieldReference, val value: Int, val type: String = ">=")

/**
 * Represents credential offer structure from.
 *
 * Example:
 * {
 *  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:gvt:1.0",
 *  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *  "key_correctness_proof":{
 *      "c":"13761754840304977622723160610073451825885870027886575679644893270880210242048",
 *      "xz_cap":"340594989055020773127826593833336513921518724477036785882482817268296213948251287179407974588164919084334695651740569687300632847210154572884165159121599184025645166277098212790056340367675548818550765726296311292965992912074551019256115749936791678223911283791007656125545683865408985565241327271094579434170968145628655514446630544302951035920170794170246151362177816426545156184025449231122642094985676281843584455651701883820074327331609796847757062117491672731024235304103252859539661490806446048072318460507557965757317583074214165065297303144649946568723405884817293591612762145863174650181663890220148408024636352402091756427859989263831219418429810184080686385298141705690561349412826",
 *      "xr_cap":[
 *          [
 *              "sex",
 *              "114901712389925570747308755505959234181050635018455439015518673538665420714600742391112487936318767337811364541526998298909351153769381909405458975688912346829659002463105330151270376906904767852191120948221184076757548668178839902476764369158701651586213020361657048021989142635432083872470012807575132413533225131436609909265898568850849369239607732687307503724259039320052575044915702202127827497635261940052132289706849314498118894709987533054997486796495324835894021134546049747254662911845883745637179643031937372509664499727668214235022494858047366785583118269238559014142100466017577191051916007450284436475900646482814224888782960060518024693146673531063922330415915936725507733741766"
 *          ],
 *          [
 *              "height",
 *              "87925827250479498410024054128993506647408563496235591997576250953229036920959413598053360534336792807215061873972469226074015743490418917494435585457616775963853677170038454238754262365048434708885925169321027257392523529242823878080721156710414911339886319487461055502252343779360662670429306854831019261366623391128187478643887112210033870842054849023198347212729401623194059443628755320835685092944707226129817372493915681098131332323544477428002628840909180360070413137657346950550327191998701401766442452826340386823830760371963355720574367910987941501327853296595241416357764706345537910660613428363744193215240447807617629842317838672093122113424390775085560952953653914862062733460343"
 *          ],
 *          [
 *              "age",
 *              "293580247693151878814398198943884612452144653998669902194814683694462974264538931634280983530503958470285180952289780325087586570844097897587837512835758168930990380054580984461202240505574024403678079197953977922329186677771110248003920244900099391489674646294554422537185554996194781678780675220797160151412165442391881155725667489570391825773712503404857486672042567138673752180271219842671234810506725182196822255079859018162540163053327438979514404327868768200699692081177648933881745792483704320534292224956976674666455897176640767709821806484479564706964601579894630931579340752620471333071445922804710427962520331104667596003689846861532048740977647311084634223124206852506298920649196"
 *          ],
 *          [
 *              "name",
 *              "151838209223886649926918852654347303937974570263808192853823982025169602769061906064239685663594882187900023324484167008090681531752389241462722998187033577222372389532314754276217632204577207156930548234292944901257640439529710798080879389939943720570224719913036311420119996340541020890815695086382900217327755857286037846480798201129396307170715168897386494499064864127724739789806487609779050080617809107250172341879674283079820670267527232446397367776741773774314369698353651749919265249180651439166600686556843514441308902088097745692987067106281950141851140402550212265361047132303049470330028968862688869371904469006037728977048516991848156345476652473561273562256067871557885766170714"
 *          ]
 *      ]
 *  },
 *  "nonce":"107428647282355717425385"
 * }
 */
data class CredentialOffer(
    override val schemaId: String,
    @JsonProperty("cred_def_id") override val credentialDefinitionId: String,
    val keyCorrectnessProof: KeyCorrectnessProof,
    val nonce: String
) : ContainsSchemaId, ContainsCredentialDefinitionId

data class KeyCorrectnessProof(val c: String, val xzCap: String, val xrCap: List<List<String>>)

/**
 * Represents credential
 *
 * Example:
 * {
 *  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:gvt:1.0",
 *  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *  "rev_reg_id":null,
 *  "values":{
 *      "height":{
 *          "raw":"175",
 *          "encoded":"175"
 *      },
 *      "age":{
 *          "raw":"28",
 *          "encoded":"28"
 *      },
 *      "sex":{
 *          "raw":"male",
 *          "encoded":"5944657099558967239210949258394887428692050081607692519917050"
 *      },
 *      "name":{
 *          "raw":"Alex",
 *          "encoded":"1139481716457488690172217916278103335"
 *      }
 *   },
 *   "signature":{
 *      "p_credential":{
 *          "m_2":"49667387409072791895333303899794250195621079019939037173941098352432267351052",
 *          "a":"46472196767765770907394666564914908827636941437774002244808957817929335484901198469847816191888793787424454173615251713617437642140800957095444096953289022795933584947973882912549573017031326042172023742700124126097617123527165994497561684340831487031052756596925838552154440928523436704804747409373866015708822951087319456147879379870504295076305153309850751921996261053799107481550379520843249944485325939052177624821394027500110005624266210467198373597250503566237828450667266448183418227918400401704699885565245770811435243112403582975529471329394083897765235108123969958207741673911072934717461483113545266188644",
 *          "e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929778868433842729916830526494323897253",
 *          "v":"9338887988426201988765421562196770167154879800148014814333922180246755157926098177887019760590189644706588962889376430933272905256523280844850525307522972101041395604753489298645400791561173204918580803173446183370402135655019581889686304488882920336043712491329845108393523901867723835284305334314940293181692913962879688500165934035632199449508262321891885131213286008555035612673560763018079383317413701517586293134534116818845722224841680073553237282409082729185652870454427020765139523137039257689447228666527191123526642595385818366411298045778216509692039175062669997796006718498422877412133922090518369374952914510984290167002861717430237148314299826063537846309857330538893275349996073101096144565363217117483025547405594356909440065486323990781381766415423430083890878386623400226799579298704315850982500754033"
 *      },
 *      "r_credential":null
 *   },
 *   "signature_correctness_proof":{
 *      "se":"1284226342082548650319469664134606254016018076595188283130710346821644123498040330813630022863109638947088616640037389617195067147163300020258649281610103910536383626344523082298355692748130628416477490704057208576461724003588709297793772889042396317116869584149262342158061174817847081593704495774591524436555209826229614130157263249266720446677213266380692272756829476405786651218028670075213938724635127001673178988057648805807845178755090432507569406752220158843852268144659430034286675620223890177350461149637114343023508452878051585971310572205236878421406629892019776501637867344989734772211374366088132166423",
 *      "c":"27921508545451359693593235318800947503350694274033708495199465258660793720689"
 *   },
 *   "rev_reg":null,
 *   "witness":null
 *  }
 */
data class Credential(
    override val schemaId: String,
    @JsonProperty("cred_def_id") override val credentialDefinitionId: String,
    @JsonProperty("rev_reg") val revocationRegistry: RawJsonMap?,
    val witness: RawJsonMap?,
    @JsonProperty("rev_reg_id") override val revocationRegistryId: String?,
    val values: Map<String, CredentialValue>,
    val signature: Map<String, RawJsonMap?>,
    val signatureCorrectnessProof: RawJsonMap
) : ContainsSchemaId, ContainsCredentialDefinitionId, ContainsRevocationRegistryId

data class CredentialValue(val raw: String, val encoded: String)

data class CredentialInfo(val credential: Credential, val credRevocId: String?, val revocRegDeltaJson: String?)

/**
 * Represents credential request
 *
 * Example:
 * {
 *  "prover_did":"V4SGRU86Z58d6TV7PBUe6f",
 *  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *  "blinded_ms":{
 *      "u":"72450058149003836603428182664797985470713819794261103126480867221755083585000019083805880372220123137259404481119363367548533297964699411822665134867264734782748083131245644644829379611885825013696986984794316038880504276824857600130124722761268165098283024899944184232804885740644223950687056600506599750855615763905035549112546265746441459321427491710929699552131014192618377018001144050499899842399856735232631240922205358342612967266348360240558563773073817892531681534248845102456387131736087786422967038955678533370053125605715326022828981184036662477668484559656286399716565826498183240073734557435082596734065",
 *      "ur":null
 *   },
 *   "blinded_ms_correctness_proof":{
 *      "c":"31090608731660042115240737510118668008332292387792553721852538017836016343046",
 *      "v_dash_cap":"621718668163798225811486019897029182898804769156507569494749044241955862304516215318245510489009046007188401984864804588528641054499552984506583720030179227648767916980985982183552124476085689924812679856949430827708131983941887148948972968983789570929564392534906650079057667375456353133856194521441614464136439297585036819776218427302870626531718509167391460209553569722115239275775660807948979706555762042625362148149841737624635909956272979193386969558740798629192930114777368203501554600798530123840820679251140249079971589888320217707423350987128237788679490998464629247139577687505921078733467007002695480111134585335699005335287893428608708147970609552011478080930963461588079631276592063200753226925160329311",
 *      "ms_cap":"32160747770865816463105278561268942103905179895830400820850731916868271052319805671289486219845889897290386865499398383995979398737576225013066455933796815223495239463836014358141"
 *   },
 *   "nonce":"1186917666793748761028490"
 * }
 *
 */
data class CredentialRequestInfo(
    val request: CredentialRequest,
    val metadata: CredentialRequestMetadata
)

data class CredentialRequest(
    val proverDid: String,
    @JsonProperty("cred_def_id") override val credentialDefinitionId: String,
    val blindedMs: RawJsonMap,
    val blindedMsCorrectnessProof: RawJsonMap,
    val nonce: String
) : ContainsCredentialDefinitionId

/**
 * Represents credential request metadata
 *
 * Example:
 * {
 *  "master_secret_blinding_data":{
 *      "v_prime":"19996992452923335739444111602323353146400610615332675413132845150786968475048282265691890632536001360833725249574222779467320862724682652038419474915879533807321016579521760714569205647449244233907560466688603170418829351681403404935647974607945749195678658844745904385566324446192755479942309264166454465738364166358492528736414247799673112394278935683056028326248487491960209103589894282360872956217377481736453946808616539396839604132182798890680363804230266296163940604353270837853010999758985713684313386130790502196378124744035357918753867699384331285330409134810007357798671352898872667892627983510765893834524972207798318482093594850",
 *      "vr_prime":null
 *  },
 *  "nonce":"1186917666793748761028490",
 *  "master_secret_name":"masterSecretId"
 * }
 */
data class CredentialRequestMetadata(
    val masterSecretBlindingData: RawJsonMap,
    val masterSecretName: String,
    val nonce: String
)

/**
 * Represents proof request credentials
 *
 * Example:
 * {
 *  "attrs":{
 *      "attr0_referent":[
 *          {
 *              "cred_info":{
 *                  "referent":"6e74e8e2-6009-4293-aa98-fac05a94feb4",
 *                  "attrs":{
 *                      "name":"Alex",
 *                      "height":"175",
 *                      "age":"28",
 *                      "sex":"male"
 *                  },
 *                  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:gvt:1.0",
 *                  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *                  "rev_reg_id":null,
 *                  "cred_rev_id":null
 *              },
 *              "interval":null
 *          }
 *      ],
 *      "attr1_referent":[
 *          {
 *              "cred_info":{
 *                  "referent":"a744d31a-cd34-4cd2-80ab-8edfac57215c",
 *                  "attrs":{
 *                      "period":"8",
 *                      "status":"partial"
 *                  },
 *                  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:xyz:1.0",
 *                  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:13:TAG_1",
 *                  "rev_reg_id":null,
 *                  "cred_rev_id":null
 *              },
 *              "interval":null
 *          }
 *      ]
 *  },
 *  "predicates":{
 *      "predicate0_referent":[
 *          {
 *              "cred_info":{
 *                  "referent":"6e74e8e2-6009-4293-aa98-fac05a94feb4",
 *                  "attrs":{
 *                      "name":"Alex",
 *                      "height":"175",
 *                      "age":"28",
 *                      "sex":"male"
 *                  },
 *                  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:gvt:1.0",
 *                  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *                  "rev_reg_id":null,
 *                  "cred_rev_id":null
 *              },
 *              "interval":null
 *          }
 *      ],
 *      "predicate1_referent":[
 *          {
 *              "cred_info":{
 *                  "referent":"a744d31a-cd34-4cd2-80ab-8edfac57215c",
 *                  "attrs":{
 *                      "period":"8",
 *                      "status":"partial"
 *                  },
 *                  "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:xyz:1.0",
 *                  "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:13:TAG_1",
 *                  "rev_reg_id":null,
 *                  "cred_rev_id":null
 *              },
 *              "interval":null
 *          }
 *      ]
 *  }
 * }
 */
data class ProofRequestCredentials(
    @JsonProperty("attrs") val attributes: Map<String, List<CredentialReferenceInfo>>,
    val predicates: Map<String, List<CredentialReferenceInfo>>
)

/**
 * Reference to a credential with additional data that is used to create proof request
 *
 * @param credentialInfo        credential reference itself
 * @param interval              interval of non-revocation, can be null if revocation is disabled
 */
data class CredentialReferenceInfo(
    @JsonProperty("cred_info") val credentialInfo: CredentialReference,
    val interval: Interval? = null
)

data class CredentialReference(
    override val schemaId: String,
    @JsonProperty("cred_def_id") override val credentialDefinitionId: String,
    val referent: String,
    @JsonProperty("attrs") val attributes: RawJsonMap,
    @JsonProperty("cred_rev_id") val credentialRevocationId: String?,
    @JsonProperty("rev_reg_id") override val revocationRegistryId: String?
) : ContainsSchemaId, ContainsCredentialDefinitionId, ContainsRevocationRegistryId

data class RequestedCredentials(
    val requestedAttributes: Map<String, RequestedAttributeInfo>,
    val requestedPredicates: Map<String, RequestedPredicateInfo>,
    val selfAttestedAttributes: Map<String, String> = hashMapOf()
)

data class RequestedAttributeInfo(
    @JsonProperty("cred_id") val credentialId: String,
    val revealed: Boolean = true,
    val timestamp: Long?
)

data class RequestedPredicateInfo(
    @JsonProperty("cred_id") val credentialId: String,
    val timestamp: Long?
)

/**
 * Represents proof request
 *
 * Format:
 *     {
 *         "name": string,
 *         "version": string,
 *         "nonce": string,
 *         "requested_attributes": { // set of requested attributes
 *              "<attr_referent>": <attr_info>, // see below
 *              ...,
 *         },
 *         "requested_predicates": { // set of requested predicates
 *              "<predicate_referent>": <predicate_info>, // see below
 *              ...,
 *          },
 *         "non_revoked": Optional<<non_revoc_interval>>, // see below,
 *                        // If specified prover must proof non-revocation
 *                        // for date in this interval for each attribute
 *                        // (can be overridden on attribute level)
 *     }
 *
 *     where
 *
 *
 *     attr_referent: Describes requested attribute
 *     {
 *         "name": string, // attribute name, (case insensitive and ignore spaces)
 *         "restrictions": Optional<[<attr_filter>]> // see below,
 *                          // if specified, credential must satisfy to one of the given restriction.
 *         "non_revoked": Optional<<non_revoc_interval>>, // see below,
 *                        // If specified prover must proof non-revocation
 *                        // for date in this interval this attribute
 *                        // (overrides proof level interval)
 *     }
 *     predicate_referent: Describes requested attribute predicate
 *     {
 *         "name": attribute name, (case insensitive and ignore spaces)
 *         "p_type": predicate type (Currently >= only)
 *         "p_value": predicate value
 *         "restrictions": Optional<[<attr_filter>]> // see below,
 *                         // if specified, credential must satisfy to one of the given restriction.
 *         "non_revoked": Optional<<non_revoc_interval>>, // see below,
 *                        // If specified prover must proof non-revocation
 *                        // for date in this interval this attribute
 *                        // (overrides proof level interval)
 *     }
 *     non_revoc_interval: Defines non-revocation interval
 *     {
 *         "from": Optional<int>, // timestamp of interval beginning
 *         "to": Optional<int>, // timestamp of interval ending
 *     }
 *     filter:
 *     {
 *         "schema_id": string, (Optional)
 *         "schema_issuer_did": string, (Optional)
 *         "schema_name": string, (Optional)
 *         "schema_version": string, (Optional)
 *         "issuer_did": string, (Optional)
 *         "cred_def_id": string, (Optional)
 *     }
 */
data class ProofRequest(
    val version: String,
    val name: String,
    val nonce: String,
    val requestedAttributes: Map<String, CredentialAttributeReference>,
    val requestedPredicates: Map<String, CredentialPredicateReference>,
    val nonRevoked: Interval? = null
)

data class CredentialAttributeReference(
    override val name: String,
    @JsonIgnore override val schemaId: String
) : AbstractCredentialReference(name, schemaId)

data class CredentialPredicateReference(
    override val name: String,
    val p_type: String,
    val p_value: Int,
    @JsonIgnore override val schemaId: String
) : AbstractCredentialReference(name, schemaId)

abstract class AbstractCredentialReference(
    open val name: String,
    override val schemaId: String
) : ContainsSchemaId

/**
 * Represents proof
 *
 * Example:
 * {
 *  "proof":{
 *      "proofs":[
 *          {
 *              "primary_proof":{
 *                  "eq_proof":{
 *                      "revealed_attrs":{
 *                          "status":"51792877103171595686471452153480627530895"
 *                      },
 *                      "a_prime":"93437784553816354542173952068698037431597866756608549851440930308749330572288563130866006263290624670056390726834531412808474437322517811692367297760879047991199882610543005549621028481828015040538685324057188327174523116216557734971621076751576101755367679399206286403422267579779988505723869032683079715412759457872083768465603051779634164233859667634748086137209571346117385090712047144345818713026567927244815273273936122470013243381119204721204611590527446371842893412573871930087219448269657429655767428937567088688568492578080906548116284860117238419205164609200156206072241439187577134141984472524260374727752",
 *                      "e":"1537629560563993724668426185387143032055273926226772946421029787053861303414843635060242660171923584398823806086001121222205299331520906",
 *                      "v":"215733004396985010136352934525349842616476464362988126013243317041668615220741824465578493405830392994358665279654131697991652338575536282718414103571016169611745385028377355707316663675515424636005307602527685318066320392939095373981164727880207534534222982275405410254920538863717227976119407673414724164911889340114816889426071206060493046131805458862027115656126062741377751991631448036994724281570249945556763371754730695109137431982616051894869106666685506330362364449386958608254175613222500857103269315256324607709036035487316641666467375117696995550862511702233740493504621793168017615181900362217684352361017440494253041959124186452063734829606658679885510870436731462476318494940903099993992125716093433485023717798429320556334055231842295194845006831099457716063467125020110572702235723365289231145243111705468571839138198791620185085299757688104090452252820457457441865888855470719462740433723483347472822308",
 *                      "m":{
 *                          "period":"11104392078391482931535678453544870183229956347494196302332576706394419869818416398159927795147586775069696481246240924647578007457468747538537724438271412586890015720987627577985"
 *                      },
 *                      "m1":"11001504881865941802070489507803390696673762236555322260603357527292378775103055790669777267068341515147299706986131480569762932377407279420602101788743716767658956963392765670652",
 *                      "m2":"11664288858407254016915830228230594802856243634879303121575238912081984305685493271969522017315745764464074705351177820515417747648271212169536842437706673272981641645221055506721"
 *                  },
 *                  "ge_proofs":[
 *                      {
 *                          "u":{
 *                              "2":"4855543131592496659104325890675208273040374541688351011172303409617860672447847263925741536718555173469305656279320858649973767110567646689347092003859001411631303614037857617728",
 *                              "0":"763966279222447022381716401516356595944740552946462891024419068260058557303303824537666674147732374821438633274744115955392612303856162083294360440974905297028788806666483875189",
 *                              "3":"2418085707595357259839454517652962075989625041046873517613914931382801938201034075796371679173834825297105210784858299971533560624721661203265601359593622656083253566341406085308",
 *                              "1":"958600182775922787941879072104025262330988478935749710488316692931758719151764441638696411795127046946644392338171503970074195180466582650439581156674363003318862961022543826774"
 *                          },
 *                          "r":{
 *                              "0":"3275863761531606716394492082826960946657389282579426905848944129041864480007418168455958299658529844791152060387550756966131810579423680299904250731895932844856464711378554413740642773166114937277840129687639949581950264848154111617423890224969594048013412871127245283897271496995056561839511176794386283396923465812158171206750594350264320691675827527716737652755867936822803654079957788502532844809525984638419658957860945779501113410139027743957227453501974273408879287239361639097306957927516447498404980864875965963816313612667872002000433959941712991952374040794586188290671466878344988585376871600634761769569572721767262717269233791620848277379635718941668276045908360694341495691612035734474249872110490787572",
 *                              "3":"1632339893502494569226819407410428192381167043923496855070475176393546329407943266435433790508096920059697682824451008545841625563143330683702744629454756567674248242611467834350793219491055065318114185456034722855037810129125426769261399750817310575275891846168851298017146074216911030405386485188246896889396030583304646322707821223805372702965004958447038750375182327047377293785519232231106276056808395332397297377351146486530256936941609414415675347667980223287507290597897101040504708318626979432217545630884593274729901362102664263886118850667840687039283070932014817932750824512688162554302619389523962353591182937645198695003769901212689351205418128950233488595035778704955299644343766868089010612071594562898",
 *                              "DELTA":"670741183766313645216255374866483602306637822486043156756251006051718100180885564733662352921509475870576235600692178576597086706825108110989150826488986171877389812858113114585556467802646553046901886866993370901917155436112559674375257767505926194308883113815631042196105086918812281157384585741671554045648384344800208008848697233430440540330010306454252492760614516283370288056739774220444876870119510377402028921244646131108241228926999248069150466529606698270615588750388587194939723402515554602119270463575016638880737575846429331807738253339570023669502546049641820871570325724223337353721908469884332935852374562204613365534524634314511109007622876632004040559701385089260624147552657081414955233469313195435",
 *                              "2":"3076043346865791231262425588290474604770060147524186243737526556278661110944980511239895985642979340894541359988191398830433714144067319462162026991335755102198543140496370131480999234060644271692485092756764495476382157484151724967624509980829644636884217343028948871440948597465405550089422808109575024545119233352298805501310180322296757649970475379022413955080582105516997008720949137398452955941261788358858385592552587390626484404083550084301236836490404317320730559059009142921554246196949931657088237897538633826592734950493835901123041560175546285010387264538841800763896967464140765224195284129793381811586777347190767308180060533026360138764943904219476543315691468555509980870850907206894132265212296981490",
 *                              "1":"1686687731642328900987756232200297266354711166188506358367191468740681334929082009783529872590428097973441297671493039763972088042913473974104923013236683157726556957469737096884468153948965048059768191859196596285225197049695048794933540142457475879440908620219854675400041256101998761068480762740372730382986110046976567031412979483122689828724793497836216951921365574560539131279993631683618257461392727843128061067038840258924689324715062147583599967006735242853515942136837464368452488961953331134265775180492939761144988627901319701851789463352811846752576231151810145634935277099333308881410517085413685593655501938535183179815185008494596862530228320524494202615985029969370596170931714815272904111917023947909"
 *                          },
 *                          "mj":"11104392078391482931535678453544870183229956347494196302332576706394419869818416398159927795147586775069696481246240924647578007457468747538537724438271412586890015720987627577985",
 *                          "alpha":"25819921071765193785396247385773983961934456673767628429140447786916532175529024596476177308270281261732786766458178608488022464548323094085140867110665655551047845328251933124485774199128782766298151802122231397825083988027079597220873828096401448919289005034165295252018331463470937685118352396359739685373351032675466289331134221274122469802229502475487915532907787400911829980543044055716318460254823751561110404183056338923320403484983826270931555874946641008984636213227553534637618185873732012255391434418817313700725334990824186618600291837540106144181413167042297631214260505904738094562223661026367884892961004097996791218058188450603877970288514962431388936873235039751781342528854806261785248779955826789104182270572893449347880893560508353136042281418692637546062874635676758693963686755324307288320949830713397757296022220651",
 *                          "t":{
 *                              "1":"91924964899387911743313960934354249502102963374043116901864255766702771484547483815676742143826089854802151380158810941980680932625952114303564873711365386564176054589373518924752359147513958119801259063408044345734331199470357395720660053616869642355098427940787545288636190974406847769609755333285142228230892701494857503678286949963921193451423055410963717001078897548336799946044383075929221092555970808965756638711492269522615084865563693530920603420540402886516747965065264307961904142231773635184248441251369999486801086736566613129953295756066983357738814423379813571518220901054758639691082158057216115161045",
 *                              "2":"32912424685655327064251762508772937248964960650172281472558162996728864527874441446120097297176095645268738921273410208005848808358260309962093339185959001741265395329139214730801652508791699718065002959229534915098691146139823167103214321183733135511605759167286725717194429727537223961618027280534000862448501217890112400866714894443620657167756309448013772742403777009837976901609333947862659038942246577176586741322329370664378289112252632784371500551252230923258599885166462553757065924595153843633244122006843915519397651485360229571807717503014864537374897686505872082307843346402029943384710044210003778189337",
 *                              "3":"43926171016375760030744794754765745301779901514236450321535697172093362766748957206469465939686436035937961759880191961169485229981808523344588314063989798556282002053276707260509072929750497640066412014055211912807995445389875446972467459463622382740720581970764780055601355313210557015739782666573456146158363041699809250215795185471039790014007649895807242398761515656308510665987739718627178894139987314539926456914228545273624906041001310540314782438195981234272538351686012665331527002132252552538818491250283044144455255360395496958099451242965203414616966253843606973285728514315410023097799114482954507125349",
 *                              "0":"92557204728206802609462336814308989400133005757215915794188689044337795660045060416989088118903491713451771836219319798266689504240676894412532120562292937202508278902183863195962979510655308509948547019527388943976585013076419055232559628150031200488604148020837571935119844373152631311731595457397816926379720884966616100276264487889159704246030604197766885241640961687259345340700471738058786244398609449778724061878412631895264770752995378805633575776481266741325331567629460977453922359270863763073027485376448244979192306165130687546528252949613489064807445714011062407634509809552290680043282223802248217798370",
 *                              "DELTA":"38388822429927102079474142707075229418576369637183491317949857415864716644076277219845177375046519875888926013363215320519192188688283571089802048478812700235882491688163667946546081516418108267917862911637918566567827862339897290461986013484001623109594673043265560741076616606122024883191194730911683166975781930569821315465833646976185954323072294399016202588920880241238951827168875085360518456209225571264504926076425425034319835736869980469816330581948381413845153265597983104003573052422927142963715752904594505293272963339514987462486344495081900871524975749963280095520843914022132502244481767166325785709930"
 *                          },
 *                          "predicate":{
 *                              "attr_name":"period",
 *                              "p_type":"GE",
 *                              "value":5
 *                          }
 *                      }
 *                  ]
 *              },
 *              "non_revoc_proof":null
 *          },
 *          {
 *              "primary_proof":{
 *                  "eq_proof":{
 *                      "revealed_attrs":{
 *                          "name":"1139481716457488690172217916278103335"
 *                      },
 *                      "a_prime":"47328948634470351519143160532790546328864613571047294153397782359532067668821866343201764570113810100065314459736286934069206686900218660941126491895709441448577583650728689189694486530482217218135250685357325584889793739539413701803454059592734533609977625144200860785127199104057528753511831969596626572078077466822803019670740330426091721970522496113524956194126268815370496401281438924698508986374823532718696807503978962485469054207974991183640860833878892654778369636540273838603275187639632700801183049652579085194788329880933518429263160715098717961810073373854329030775565087703269127778921810617175757055699",
 *                      "e":"56895902393968433947112156013172865915604909954956050233162561111009404969378824544090400375422157645674337356379824768859227008355906020",
 *                      "v":"177955081870698596833664310113316549319283609739673257286484399710754626246897189546085022201015024124404652794937655463799971529065357045408274760705388327406959601375604481761532382073467237410626988982944246670821811468161047532133722805771915132789095610053941715999687358896185208743242339074243307920712648009492850495124627885544578670556070790258161390140912178345906840315568822933250677007251503874805931807391282280525145148469645355932628170297776151639415632460869476302076482163847539825023662496293670603365057354539705035818009546765244326853734946252758363137542852973900573001156036716904275207788173915111023802330130081014899281490551633867829141964233027799721434733125068562705167130275426534468704149598308441763695455589701541895754062040421001433978991218138629548727695266646130100167621445130346281727185615612135269366452068670853746112442322320313964612793568037954702649623410108987423083103",
 *                      "m":{
 *                          "age":"13583082689326186576561794555295140012094545240335897011332799786824319627425001048056722155899593965487778901668145148954341625262748387890248145470514395695954882002170136502297",
 *                          "height":"7328300303851680357536221775349204874185818606612213893756588074086798305232244550577247807742915567596276780815516103539699590800477814853929750195134658579599459216920016286645",
 *                          "sex":"3821945437611985051357585973505668119586586536245863843003873159221429022776863899794844739259444938072521243947168067209454927709799623212955983438620373583164705621901949414619"
 *                      },
 *                      "m1":"11001504881865941802070489507803390696673762236555322260603357527292378775103055790669777267068341515147299706986131480569762932377407279420602101788743716767658956963392765670652",
 *                      "m2":"10539582316790697212624348849742958316627168096682815128125415153273493531815905570059363092660158865766075408377239947414554551578441058657432468066956450391815771909619513799640"
 *                  },
 *                  "ge_proofs":[
 *                      {
 *                          "u":{
 *                              "3":"2664478266396465852128419225598922876183444430915813829552280818647914328139104049036921494706541578282179215057206673249792408175931420591197068567991759869635434385928682359072",
 *                              "2":"2874789567070769223753620432473126702021558049153645154353252924505748047882918919329374816794686473101080251950774734940614056892584139960670160405243174065159937705954593640069",
 *                              "1":"12920862262853722339787243595393265859195313402483169929578619837757560620439871501094932813448926440784866976803866938146726843601205794191506364707351837117203093513598629165321",
 *                              "0":"9646032665563800347992153789426257499576988389822444437056627735906953721515178972956158279180279813189791532041594842831782575624818321567578378971443466953419936595347412892291"
 *                          },
 *                          "r":{
 *                              "0":"3715244206129132120118032137038069538968811625753282266403421520614781363155003208020279723009403402247077845804965641634757427247454373788134604890788700545317953333020752083488584183826773470547891049533842465073165024914663419133045227735150817677628535218264446868185735064351502189363437839790373039004239325685379063896359800014871354623082906562271997282537387000879881887742374122661117665079070089360502622803744894964456516077246266862697648255350491795871331367191636090116642326122572630341529676618896324000770924188318312805938125379170967415905110482868093464389437774754917779819090357848599946813878686088873584772002943780961486059757919081915651321084905225801965757945623643278799930089864237092457",
 *                              "DELTA":"1867295636191498684352941011427971200783156537264545467606286253260895767755963246472583964696730737441933364147876202878517594152797588364613949232732938828861514475327205689440227201053192295852170117874670912745167158963030846238041501160243866811227408541276478383623263706461547486697008082652791318660412839934902185750268963457319739451924859791555335024490616502660373291390150800798581603638918140104243866939631707341789575179074128751357951179804969566191658375193904580347607899578699162934364370334803497415820266159074430683958049568752145060896960176710857983914920539717008990548296716013391716063509975277890379186013467097990817658161327955549162208720098662188632325078989820245887241362431001009563",
 *                              "1":"561287355023649168682884407196368891146176701430640387658545569671207268405304272711557529779361054133203936853012323774277332476567657174884905206759583344217452091009067961283518938852946786447559981041617454386663155615345668623094136271200389306594136570468033283469248609732605472620910861450791846808599896199177237787820850488716029705312094184632508621098511800682591462471911452173038482799058086315532630209559985658119956997145511000739190609775440974624780783187906157444431963508486310643743841203135526007700817850893309618587588807734338612949750073101920450696462788838514489613044716285683235719602383875039170269926825548666663043574500598404811847409411448213408277025610387466520080052721512813829",
 *                              "2":"3558042926714515295249029088793509248706282139554394356395304057341955223560777508928958543670632526997537734183534630223399281700063227226054186592240066023350532972950609967698109624317622603493809705058243304759417711738743463679737843253615595783243393394309194645157946918766225927908473271223963393071283106032564179708656266443299288222320937246035660180126981232404381595823810527389027723520452194002555612714586214264783096907198989558084857092342382568377616570607971159589262019466999139173408094462755862551625437100445783258248044636161541444582559767541028463936959732263464635542092630995538263366154589777213377663421694424212064651827381912182307643170555065265013623657977872436069561423076968904117",
 *                              "3":"1442856926220651010062615811531969373855283420608218543187130111379781111847626840814242039477507126800202156226700933979054250609971810682712228380089340531728832516293436083896403198821568604660877975073364455730709254415796098541396484091874683373366136300998512305503718401878767459899913064846465306725690219180944870827191300195929390390970847251664505707848766259575276118080404357424071031579606167695541338983652122062341264570193444568580651759738954043858145108840511367737712566555538082598514965848135620205398029930629847106716889196363334378758436168444443060144728419086233943898847132957892219703002025446128332845731743018306397766698711518306904972971288372993910150311898639656522886226370069309519"
 *                          },
 *                          "mj":"13583082689326186576561794555295140012094545240335897011332799786824319627425001048056722155899593965487778901668145148954341625262748387890248145470514395695954882002170136502297",
 *                          "alpha":"60571685209802228542926669729424779594750114653590206478378938201856877128259328368355011252928898712972341398926966517999913835629765378669820540391928523946387509361377009253289732581385122729980002156427402751923039444217054931880296810906281207207918278288989307606588041388971890607836179215683331778432093636210130620871696464021666375326281803470991831214668546289081164009044998768155886113370394030171421816113753069358937500743499771417499151344705844497920840767926489247757456905103634030566928192209384449398254897516766063965149570935645446739850781809753101765178344928392159879006500726701066507689164543105961285560982590916261740406393040634702250274627733467516352786603297672903722178204837083905570226559473966796265289619314283988640388300011068820022550235955045198975314437356668393310058442186477281795590982918049",
 *                          "t":{
 *                              "1":"3917932745629582127219250038708092265566887155007120856339494719674790722960328077288315719190728882778302662881872080549549133299291382317431792267502912822498550590527566034288460614402922347299520082604334314826340397639414815909477823018872644582901324348324465176314520334938593789127174678604322625151863305737999854985400514798866774397039869659236705857652789966857880878838938305102752060917628356017909971630690582737878108167818491460961743106041265152419715981316229063702380204742431313380344530099532150196268566452559844179911069002953545897855218003398815458056571383147125609598195630378847668019511",
 *                              "2":"64774945772666467213459907412540104569692252756792711021211619040201316580314420002525634540499616007070183109128122674165389775414769599071653935559628566103537718813202211112532314814633270205797083890633463580199419019982050914745038560091281491684901596642570564245090157531977771539523652082202892876358944002867965591015192774783276966679142538182973694309760284637269319011504944624261564022735819987431009705922400478238491511489488500731375996532055548136657118424735806667221194913019119523009657517427709940285379267572597470958106660142112547763345176847341060883413947404741542158648832100652652642885338",
 *                              "3":"64918782781195804280876465078139845841124913026452141812258258106320409744062319366734490141355878792954599091818537663272449906340744397935922918530114322038853677510020487981537838572415595043448838160433274446111737680915688949528363127456759146669076528694282722954522918621064119240750773420957726510052635454769601105597402425481085036651621992624549802418925971436151278472370943775780325408159831700067847827705561868408154468712956426621131370851418631130879257285345516838655421783996770016197322485936671258382727846178980008054275214229529684265005961139121671935502471732923579408573510107590680395265576",
 *                              "0":"62684584528254149664357520553406197277224596930694097695298226093110291160485656459125421763402902774376410122711239106332325075860007307781872525273933964172923287359352574142630642008993342032042438044326019753344134393977583288045963020678212298499724661087882829923292789374097726807314263982788634886044069785910411766188694255055756043543249799549067571158135281040874937717063942124584159287770991168238067214526265824266943116523994090773312861862422023744360211114381817491723997587333077778762774919918561347427271143655268358117339896698116440092026493541386592280477778803927446190120589641095841529589738",
 *                              "DELTA":"12301970271461860944051707948260966652880954378010849587994918909298902847818581277523649239091954958076545678956896821290586070308227852819596203947038479326416325808907391266741705539171827662008214207570999872216978014532111946257686725673625389936546250445276945595460059576253755821390960546266584145323454065614178929748246794894739186255841987066657776131774423937478231294085335811880017217512118928798920979912080788477578228659737826609479271562946743283578570622022953624062848475934655528456591837215841271382571491750403407899250934913888374563113144270506204899963905010677884916530469130922343386153953"
 *                          },
 *                          "predicate":{
 *                              "attr_name":"age",
 *                              "p_type":"GE",
 *                              "value":18
 *                          }
 *                      }
 *                  ]
 *              },
 *              "non_revoc_proof":null
 *          }
 *      ],
 *      "aggregated_proof":{
 *          "c_hash":"95837096850430218504093225408781786197920103703738504206700427633890377110833",
 *          "c_list":[
 *              [
 *                  2,228,43,121,227,174,99,28,40,23,108,39,223,134,55,22,90,241,181,30,135,47,167...
 *              ],
 *              [
 *                  2,221,49,189,43,133,130,48,147,243,128,172,223,60,178,213,130,6,153,102,36,249...
 *              ],
 *              ...
 *         ]
 *     }
 *  },
 *  "requested_proof":{
 *      "revealed_attrs":{
 *          "attr0_referent":{
 *              "sub_proof_index":1,
 *              "raw":"Alex",
 *              "encoded":"1139481716457488690172217916278103335"
 *          },
 *          "attr1_referent":{
 *              "sub_proof_index":0,
 *              "raw":"partial",
 *              "encoded":"51792877103171595686471452153480627530895"
 *          }
 *      },
 *      "self_attested_attrs":{},
 *      "unrevealed_attrs":{},
 *      "predicates":{
 *          "predicate0_referent":{
 *              "sub_proof_index":1
 *          },
 *          "predicate1_referent":{
 *              "sub_proof_index":0
 *          }
 *      }
 *  },
 *  "identifiers":[
 *      {
 *          "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:xyz:1.0",
 *          "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:13:TAG_1",
 *          "rev_reg_id":null,
 *          "timestamp":null
 *      },
 *      {
 *          "schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:gvt:1.0",
 *          "cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *          "rev_reg_id":null,
 *          "timestamp":null
 *      }
 *  ]
 * }
 */
data class ParsedProof(
    val proof: Proof,
    val requestedProof: RequestedProof,
    val identifiers: List<ProofIdentifier>
)

data class ProofInfo(
    val proofData: ParsedProof
) {
    @JsonIgnore
    fun isAttributeExists(value: String) = proofData.requestedProof.revealedAttrs.values.any { it.raw == value }

    @JsonIgnore
    fun getAttribyteValue(attrName: String) = proofData.requestedProof.revealedAttrs[attrName]
}

data class ProofIdentifier(
    override val schemaId: String,
    @JsonProperty("cred_def_id") override val credentialDefinitionId: String,
    @JsonProperty("rev_reg_id") override val revocationRegistryId: String?,
    val timestamp: Long?
) : ContainsSchemaId, ContainsRevocationRegistryId, ContainsCredentialDefinitionId

data class Proof(val proofs: List<ProofDetails>, val aggregatedProof: Any)

data class RevealedAttributeReference(val subProofIndex: Int, val raw: String, val encoded: String)

data class RevealedPredicateReference(@JsonProperty("sub_proof_index") val subProofIndex: Int)

data class RequestedProof(
    val revealedAttrs: Map<String, RevealedAttributeReference>,
    val selfAttestedAttrs: Map<String, RevealedAttributeReference>, // not tested
    val unrevealedAttrs: Map<String, CredentialReference>, // not tested
    val predicates: Map<String, RevealedPredicateReference>
)

data class ProofDetails(val primaryProof: Any, @JsonProperty("non_revoc_proof") val nonRevokedProof: Any?)

/**
 * Represents indy schema
 *
 * @param id                identifier of schema
 * @param attributeNames    an array of attribute name strings
 * @param seqNo             ??? Int
 * @param name              Schema's name string
 * @param version           Schema's version string
 * @param ver              Version of the Schema json
 */
data class Schema(
    val ver: String,
    val id: String,
    val name: String,
    val version: String,
    @JsonProperty("attrNames") val attributeNames: List<String>,
    @JsonProperty("seqNo") val seqNo: Int?,
    @JsonIgnore override val schemaId: String = id
) : ContainsSchemaId {
    @JsonIgnore
    fun getOwner() = id.split(":").first()

    @JsonIgnore
    fun isValid() = seqNo != null

    @JsonIgnore
    fun getFilter() = """{name:$name,version:$version,owner:${getOwner()}}"""
}

/**
 * Represents credential definition
 *
 * Example:
 * {
 *  "ver":"1.0",
 *  "id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *  "schemaId":"11",
 *  "type":"CL",
 *  "tag":"TAG_1",
 *  "value":{
 *      "primary":{
 *          "n":"97825789590062692150319390633467047046201095546380339364160961030429137551345980953797290715661332171822654941232742526180523305975436127060967945697600291470349688931509035153112372164175391196321435197412518123214148508985637308223324599142177695725198704394816353613227336593431540982906270549568391784047827941399905911323367262453292590513881444395762311018337780680352564520585183115243471839552585387700359266104870621499920269868340747617483585174509821630813967372030256014647503731893474943716949401787092423796309347202300689031224683810152043236004828131092812383226231107878482692717606522179435737963809",
 *          "s":"39733411017179560244024968899642664398180361222127496719414627387111951836383304903709718151952941019469808679723550262854530221428192476695197984887679496172637317619920757202465712652277595749798862290700699750698253379509815941232001323375550623145841707962772398431536953095683812602550974096101709249765431308450233784849698817513922831987542597248666167913756782897562757576852321402391681015249723862430503167634290721024776247393188943703605451071828541577890452008931414573470669791085941653286452972602880768000278121444139729224375672281655506532604713060219567780190942579824169994294072191071431007530810",
 *          "rms":"61585968719825679820954752050482652604565722712299150828907711156378465728278927386099924570835148120166800215501590391175373817600340685471137391682056596396948247323267163942586709351681939970494142412129799511696342745194217108137415058975773547340948891027007892589530814649299044423034413987834238455096179370756258781816398285502424550467300576662889583917299579341488833013935611065055037617571364438681808991132527219626325739828132974032785684027848951273437930333539462921502518948344115455530438470689386576122673159249136945103964126302959119266362267068536535033404743724975610513609398570252057067331886",
 *          "r":{
 *              "sex":"2626632503410167078284139961009808200382092764903982154210447637569805753120300115008307139969073560497200188899592685451384854274242283626236697651644769767326232772277555517065937909501419381179080261665387996698800646130615385642112726371067011078728898840459575004146540068812617687191896173439535324651831638703293218277986742164291005504672543591242537338585952312913780174152675948770888046937709087672131923165052749838431320300824773077411638959605419049694924508977411338985002497282921570089360291100373020791726207566293384508958447187009585844585209052878418330808481074070751668704887853552386517055930",
 *              "age":"63523998866502911303673581300753005318589707661733870330365925650678633010151708097940788515047278006579733539741582491459304064424323691384183804262052564249576046828258820357384995379735852197709005880259268104967579474816007639479449921766514022449488302232195920775417530914330757023422712527921767883202594148305685628110351091975069678465452002764246471559952603228501390812407272505516626682939968775033433977531801891624221994717435068960928494827798809830377239707582390852098331875021612002243884655607102948250212831978233087113810152800112957042083343256531406924266033890661377235591568062671765165489870",
 *              "height":"36827765894725149703413262269832028490032908067763882745205554332012635847087233004524302605910728480570937402307712789502014630672100059296347324079688081495564484112324844430136540326393451614894312613497061339343299132067014791868694418918509496647956391816348038246819177729541875327561764868375504439504466305637343059834216402153387268518555623358163497146704705193066510197248636230544075701119933663421354632627652873131384367714145308220991601682858854828503784646138040614899662342567419634624453935944271936989617257057364382094088153891706740734234897521093567777490241869122832789895631974583798926624671",
 *              "name":"18788372530355800304122414243192145025214535406665833599843110827678593803924867871859801890985253387426380024087621919226693609773752962328661361052659049213275281388746081914267713275478093781352622945304514254172068842629062418220350021713935789540517191405786855513356949833137385453147630963308137101514443239171812123677649126140681268375332458594132454494089548479553487688999824220296121412847356897601071257721654163708407527915287896754809415712208942681473722548922079792352789470647534972277610782248997591336611518792109685139554803952262932181423545140306161196124727474932461364805862202642858524609107"
 *          },
 *          "rctxt":"21056906618091809674328434216237046452978176268338751408357494760417916268345410074697140864434870457509245504931505200747385462128623958149802532264637271315245535230317207882554477612845326181656095735135034295869377522948921706594872112215344401196135236409557117610942403243622069726879719720245597225962847121582587787460228916727277232051837521756142362807695713742828849067021873709859012902116849601485209985334561870621322500146913090310536248902632690626159970312599495795517225254902488480051407151857092179309035985517180130778385441082409815097047032542548306682739499193653174348004839499978229431751109",
 *          "z":"71880092276687608941911908974425364123157865039842259909133150431339154814634541364269068194300155348866964287780246139148914883270133559128984906638698935281508004126554770000460606903675678065228868678216890304285419036243351069244042246132289914582838445455253893803490784730193496852402692605579292635591572769896044739736701886904011628451851130193350093564432356884197344530964952157333799001881023464722691561680338381123701061260705675102730234526293501133803359541588132411602206704822105840321932467235097720843749769398614648948458076550887807392288231278953816644166369415087060316938918792123220256283592"
 *      }
 *  }
 * }
 */
data class CredentialDefinition(
    val ver: String,
    val id: String,
    @JsonProperty("schemaId") override val schemaId: String,
    val type: String,
    val tag: String,
    val value: CredentialPubKeys,
    @JsonIgnore override val credentialDefinitionId: String = id
) : ContainsSchemaId, ContainsCredentialDefinitionId {
    @JsonIgnore
    fun getOwner() = id.split(":").first()

    @JsonIgnore
    fun getSchemaSeqNo() = schemaId

    @JsonIgnore
    fun getFilter() = """{schemaSeqNo:${getSchemaSeqNo()},owner:${getOwner()}}"""
}

data class CredentialPubKeys(
    val primary: Any,
    val revocation: Any?
)

data class RevocationRegistryConfig(
    val issuanceType: String,
    @JsonProperty("max_cred_num") val maximumCredentialNumber: Int
)

/**
 * Represents revocation registry definition
 *
 * Example:
 * {
 *  "ver":"1.0",
 *  "id":"V4SGRU86Z58d6TV7PBUe6f:4:V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1:CL_ACCUM:REV_TAG_1",
 *  "revocDefType":"CL_ACCUM",
 *  "tag":"REV_TAG_1",
 *  "credDefId":"V4SGRU86Z58d6TV7PBUe6f:3:CL:11:TAG_1",
 *  "value":{
 *      "issuanceType":"ISSUANCE_ON_DEMAND",
 *      "maxCredNum":10000,
 *      "publicKeys":{
 *          "accumKey":{
 *              "z":"DD5CB7C7B73632 4AFF49D65DC22B 75DCE6B4720E9A 6850C5B997857B 24A81D0A FB91DEDCC2933B 58F8253DDC2932 A70370A1A6B790 B7C1D0EA96C211 1F9AC413 42BCA194D89D6E 2CA77CB3C7D22A 5E2004C628FE02 E3AF249480D877 1078CDD3 1899F0C8F69EF0 6E6597A07EFCBE 3050DA53AC48F 138D31F5D0F836 20DD73AA E8CBC1334EAC3E 6221F7D1C21FBC AB5605E23860D7 BBF7B256371799 2E756F8 C7ECC90D700DAB D1A7EEED09CB33 DA218E8EC0C2E7 93EC5FF2FE457C 1861FA59 63FB8BC55D915 B726AE490AC56C 49ED7DEFC0988D 60815A62EC29CD 1D1E8504 76C9A801569840 5E417CE5540DCD 77FCEDF0A5DD9 47D9C0D070C4B1 23315D95 87773524083058 E75B5A54FF24F 33148931C2BB4E 426BBE4DC6AA66 3C910CC 66C14B91B5D70A FD94681339A7B5 D27A926A28D6AE 385A898772ED98 797FFA8 5A591894E431CF 582624540B9B0C 28E11C07575D81 8D96EE6F5EFB27 16D6BD9B DF160431970E42 3AAE8325F8F8B8 93D8C65022890A 485AFA07D3F281 423B31C"
 *          }
 *      },
 *      "tailsHash":"FU6TF1Tw8D2Pk8MT8y5DVZSBUJqq3WdGYvTm3oGU2hYS",
 *      "tailsLocation":"/home/joinu/.indy_client/tails/FU6TF1Tw8D2Pk8MT8y5DVZSBUJqq3WdGYvTm3oGU2hYS"
 *  }
 * }
 */

data class RevocationRegistryInfo(
    val definition: RevocationRegistryDefinition,
    val entry: RevocationRegistryEntry
)

data class RevocationRegistryDefinition(
    val ver: String,
    val id: String,
    @JsonProperty("revocDefType") val revocationRegistryDefinitionType: String,
    val tag: String,
    @JsonProperty("credDefId") override val credentialDefinitionId: String,
    val value: RawJsonMap,
    @JsonIgnore override val revocationRegistryId: String? = id
) : ContainsCredentialDefinitionId, ContainsRevocationRegistryId

/**
 * Represents revocation registry entry
 *
 * Example
 * {
 *  "ver":"1.0",
 *  "value":{
 *      "accum":"true 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
 *  }
 * }
 */
data class RevocationRegistryEntry(
    val ver: String,
    val value: RawJsonMap
)

data class RevocationState(
    val witness: RawJsonMap,
    @JsonProperty("rev_reg") val revocationRegistry: RawJsonMap,
    val timestamp: Long,
    @JsonIgnore override var revocationRegistryId: String? = null
) : ContainsRevocationRegistryId

/**
 * Abstracts blob storage reader and writer which are used for tails file management
 */
data class BlobStorageHandler(val reader: BlobStorageReader, val writer: BlobStorageWriter)

/**
 * Represents credential reference
 */
data class ReferentCredential(val key: String, val credentialUUID: String)

/**
 * Represents data which is needed for verifier to verify proof
 * Data in this data class is stored as JSON
 */
data class DataUsedInProofJson(
    val schemas: String,
    val credentialDefinitions: String,
    val revocationRegistryDefinitions: String,
    val revocationRegistries: String
)

data class StorageConfig(val path: String)

/**
 * {
 *     "id": string, Identifier of the wallet. Configured storage uses this identifier to lookup exact wallet data placement.
 *
 *     "storage_type": optional<string>, Type of the wallet storage. Defaults to 'default'.
 *     'Default' storage type allows to store wallet data in the local file.
 *     Custom storage types can be registered with indy_register_wallet_storage call.
 *
 *     "storage_config": optional<object>, Storage configuration json. Storage type defines set of supported keys.
 *     Can be optional if storage supports default configuration.
 *
 *     For 'default' storage type configuration is:
 *     {
 *         "path": optional<string>, Path to the directory with wallet files.
 *         Defaults to $HOME/.indy_client/wallets.
 *         Wallet will be stored in the file {path}/{id}/sqlite.db
 *     }
 * }
 */
data class WalletConfig(
    val id: String,
    val storageType: String = "default",
    val storageConfig: StorageConfig? = null
)

/**
 * Represents some details of a particular identity
 *
 * @param did: [String]             did of this identity
 * @param verkey: [String]          verification key of this identity
 * @param alias: [String]           <optional> additional alias of this identity
 * @param role: [String]            <optional> role of this identity (e.g. TRUSTEE)
 */
data class IdentityDetails(
    val did: String,
    val verkey: String,
    @JsonIgnore val alias: String?,
    @JsonIgnore val role: String?
) {
    @JsonIgnore
    fun getIdentityRecord() = """{"did":"$did","verkey":"$verkey"}"""
}

class SchemaId(val did: String, val name: String, val version: String) {
    override fun toString() = "$did:2:$name:$version"

    companion object : FromString<SchemaId> {
        override fun fromString(str: String): SchemaId {
            val (did, _, name, version) = str.split(":")

            return SchemaId(did, name, version)
        }
    }
}

data class CredentialDefinitionId(val did: String, val schemaSeqNo: Int, val tag: String) {
    override fun toString() = "$did:3:CL:$schemaSeqNo:$tag"

    fun getRevocationRegistryDefinitionId(revTag: String) = RevocationRegistryDefinitionId(did, this, revTag)

    companion object : FromString<CredentialDefinitionId> {
        override fun fromString(str: String): CredentialDefinitionId {
            val strSplitted = str.split(":")

            val didCred = strSplitted[0]
            val tag = strSplitted[strSplitted.lastIndex]

            val seqNo = strSplitted[3].toInt()

            return CredentialDefinitionId(didCred, seqNo, tag)
        }
    }
}

data class RevocationRegistryDefinitionId(
    val did: String,
    private val credentialDefinitionId: CredentialDefinitionId,
    val tag: String
) {
    override fun toString() = "$did:4:$credentialDefinitionId:CL_ACCUM:$tag"

    fun getCredentialDefinitionId() = credentialDefinitionId

    companion object : FromString<RevocationRegistryDefinitionId> {
        override fun fromString(str: String): RevocationRegistryDefinitionId {
            val strSplitted = str.split(":")
            val didRev = strSplitted[0]
            val tagRev = strSplitted[strSplitted.lastIndex]
            val didCred = strSplitted[2]
            val tagCred = strSplitted[strSplitted.lastIndex - 2]

            val seqNo = strSplitted[5].toInt()

            return RevocationRegistryDefinitionId(didRev, CredentialDefinitionId(didCred, seqNo, tagCred), tagRev)
        }
    }
}

interface FromString<T : Any> {
    fun fromString(str: String): T
}